#!/bin/sh
# install - install a program, script, or datafile

scriptversion=2013-12-25.23; # UTC

# This originates from X11R5 (mit/util/scripts/install.sh), which was
# later released in X11R6 (xc/config/util/install.sh) with the
# following copyright and license.
#
# Copyright (C) 1994 X Consortium
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the &quot;Software&quot;), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-
# TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name of the X Consortium shall not
# be used in advertising or otherwise to promote the sale, use or other deal-
# ings in this Software without prior written authorization from the X Consor-
# tium.
#
#
# FSF changes to this file are in the public domain.
#
# Calling this script install-sh is preferred over install.sh, to prevent
# &#39;make&#39; implicit rules from creating a file called install from it
# when there is no Makefile.
#
# This script is compatible with the BSD install script, but was written
# from scratch.

tab=&#39;	&#39;
nl=&#39;
&#39;
IFS=&quot; $tab$nl&quot;

# Set DOITPROG to &quot;echo&quot; to test this script.

doit=${DOITPROG-}
doit_exec=${doit:-exec}

# Put in absolute file names if you don&#39;t have them in your path;
# or use environment vars.

chgrpprog=${CHGRPPROG-chgrp}
chmodprog=${CHMODPROG-chmod}
chownprog=${CHOWNPROG-chown}
cmpprog=${CMPPROG-cmp}
cpprog=${CPPROG-cp}
mkdirprog=${MKDIRPROG-mkdir}
mvprog=${MVPROG-mv}
rmprog=${RMPROG-rm}
stripprog=${STRIPPROG-strip}

posix_mkdir=

# Desired mode of installed file.
mode=0755

chgrpcmd=
chmodcmd=$chmodprog
chowncmd=
mvcmd=$mvprog
rmcmd=&quot;$rmprog -f&quot;
stripcmd=

src=
dst=
dir_arg=
dst_arg=

copy_on_change=false
is_target_a_directory=possibly

usage=&quot;\
Usage: $0 [OPTION]... [-T] SRCFILE DSTFILE
   or: $0 [OPTION]... SRCFILES... DIRECTORY
   or: $0 [OPTION]... -t DIRECTORY SRCFILES...
   or: $0 [OPTION]... -d DIRECTORIES...

In the 1st form, copy SRCFILE to DSTFILE.
In the 2nd and 3rd, copy all SRCFILES to DIRECTORY.
In the 4th, create DIRECTORIES.

Options:
     --help     display this help and exit.
     --version  display version info and exit.

  -c            (ignored)
  -C            install only if different (preserve the last data modification time)
  -d            create directories instead of installing files.
  -g GROUP      $chgrpprog installed files to GROUP.
  -m MODE       $chmodprog installed files to MODE.
  -o USER       $chownprog installed files to USER.
  -s            $stripprog installed files.
  -t DIRECTORY  install into DIRECTORY.
  -T            report an error if DSTFILE is a directory.

Environment variables override the default commands:
  CHGRPPROG CHMODPROG CHOWNPROG CMPPROG CPPROG MKDIRPROG MVPROG
  RMPROG STRIPPROG
&quot;

while test $# -ne 0; do
  case $1 in
    -c) ;;

    -C) copy_on_change=true;;

    -d) dir_arg=true;;

    -g) chgrpcmd=&quot;$chgrpprog $2&quot;
	shift;;

    --help) echo &quot;$usage&quot;; exit $?;;

    -m) mode=$2
	case $mode in
          *&#39; &#39;* | *&quot;$tab&quot;* | *&quot;$nl&quot;* | *&#39;*&#39;* | *&#39;?&#39;* | *&#39;[&#39;*)
	    echo &quot;$0: invalid mode: $mode&quot; &gt;&amp;2
	    exit 1;;
	esac
	shift;;

    -o) chowncmd=&quot;$chownprog $2&quot;
	shift;;

    -s) stripcmd=$stripprog;;

    -t)
        is_target_a_directory=always
        dst_arg=$2
	# Protect names problematic for &#39;test&#39; and other utilities.
	case $dst_arg in
	  -* | [=\(\)!]) dst_arg=./$dst_arg;;
	esac
	shift;;

    -T) is_target_a_directory=never;;

    --version) echo &quot;$0 $scriptversion&quot;; exit $?;;

    --)	shift
	break;;

    -*)	echo &quot;$0: invalid option: $1&quot; &gt;&amp;2
	exit 1;;

    *)  break;;
  esac
  shift
done

# We allow the use of options -d and -T together, by making -d
# take the precedence; this is for compatibility with GNU install.

if test -n &quot;$dir_arg&quot;; then
  if test -n &quot;$dst_arg&quot;; then
    echo &quot;$0: target directory not allowed when installing a directory.&quot; &gt;&amp;2
    exit 1
  fi
fi

if test $# -ne 0 &amp;&amp; test -z &quot;$dir_arg$dst_arg&quot;; then
  # When -d is used, all remaining arguments are directories to create.
  # When -t is used, the destination is already specified.
  # Otherwise, the last argument is the destination.  Remove it from $@.
  for arg
  do
    if test -n &quot;$dst_arg&quot;; then
      # $@ is not empty: it contains at least $arg.
      set fnord &quot;$@&quot; &quot;$dst_arg&quot;
      shift # fnord
    fi
    shift # arg
    dst_arg=$arg
    # Protect names problematic for &#39;test&#39; and other utilities.
    case $dst_arg in
      -* | [=\(\)!]) dst_arg=./$dst_arg;;
    esac
  done
fi

if test $# -eq 0; then
  if test -z &quot;$dir_arg&quot;; then
    echo &quot;$0: no input file specified.&quot; &gt;&amp;2
    exit 1
  fi
  # It&#39;s OK to call &#39;install-sh -d&#39; without argument.
  # This can happen when creating conditional directories.
  exit 0
fi

if test -z &quot;$dir_arg&quot;; then
  if test $# -gt 1 || test &quot;$is_target_a_directory&quot; = always; then
    if test ! -d &quot;$dst_arg&quot;; then
      echo &quot;$0: $dst_arg: Is not a directory.&quot; &gt;&amp;2
      exit 1
    fi
  fi
fi

if test -z &quot;$dir_arg&quot;; then
  do_exit=&#39;(exit $ret); exit $ret&#39;
  trap &quot;ret=129; $do_exit&quot; 1
  trap &quot;ret=130; $do_exit&quot; 2
  trap &quot;ret=141; $do_exit&quot; 13
  trap &quot;ret=143; $do_exit&quot; 15

  # Set umask so as not to create temps with too-generous modes.
  # However, &#39;strip&#39; requires both read and write access to temps.
  case $mode in
    # Optimize common cases.
    *644) cp_umask=133;;
    *755) cp_umask=22;;

    *[0-7])
      if test -z &quot;$stripcmd&quot;; then
	u_plus_rw=
      else
	u_plus_rw=&#39;% 200&#39;
      fi
      cp_umask=`expr &#39;(&#39; 777 - $mode % 1000 &#39;)&#39; $u_plus_rw`;;
    *)
      if test -z &quot;$stripcmd&quot;; then
	u_plus_rw=
      else
	u_plus_rw=,u+rw
      fi
      cp_umask=$mode$u_plus_rw;;
  esac
fi

for src
do
  # Protect names problematic for &#39;test&#39; and other utilities.
  case $src in
    -* | [=\(\)!]) src=./$src;;
  esac

  if test -n &quot;$dir_arg&quot;; then
    dst=$src
    dstdir=$dst
    test -d &quot;$dstdir&quot;
    dstdir_status=$?
  else

    # Waiting for this to be detected by the &quot;$cpprog $src $dsttmp&quot; command
    # might cause directories to be created, which would be especially bad
    # if $src (and thus $dsttmp) contains &#39;*&#39;.
    if test ! -f &quot;$src&quot; &amp;&amp; test ! -d &quot;$src&quot;; then
      echo &quot;$0: $src does not exist.&quot; &gt;&amp;2
      exit 1
    fi

    if test -z &quot;$dst_arg&quot;; then
      echo &quot;$0: no destination specified.&quot; &gt;&amp;2
      exit 1
    fi
    dst=$dst_arg

    # If destination is a directory, append the input filename; won&#39;t work
    # if double slashes aren&#39;t ignored.
    if test -d &quot;$dst&quot;; then
      if test &quot;$is_target_a_directory&quot; = never; then
	echo &quot;$0: $dst_arg: Is a directory&quot; &gt;&amp;2
	exit 1
      fi
      dstdir=$dst
      dst=$dstdir/`basename &quot;$src&quot;`
      dstdir_status=0
    else
      dstdir=`dirname &quot;$dst&quot;`
      test -d &quot;$dstdir&quot;
      dstdir_status=$?
    fi
  fi

  obsolete_mkdir_used=false

  if test $dstdir_status != 0; then
    case $posix_mkdir in
      &#39;&#39;)
	# Create intermediate dirs using mode 755 as modified by the umask.
	# This is like FreeBSD &#39;install&#39; as of 1997-10-28.
	umask=`umask`
	case $stripcmd.$umask in
	  # Optimize common cases.
	  *[2367][2367]) mkdir_umask=$umask;;
	  .*0[02][02] | .[02][02] | .[02]) mkdir_umask=22;;

	  *[0-7])
	    mkdir_umask=`expr $umask + 22 \
	      - $umask % 100 % 40 + $umask % 20 \
	      - $umask % 10 % 4 + $umask % 2
	    `;;
	  *) mkdir_umask=$umask,go-w;;
	esac

	# With -d, create the new directory with the user-specified mode.
	# Otherwise, rely on $mkdir_umask.
	if test -n &quot;$dir_arg&quot;; then
	  mkdir_mode=-m$mode
	else
	  mkdir_mode=
	fi

	posix_mkdir=false
	case $umask in
	  *[123567][0-7][0-7])
	    # POSIX mkdir -p sets u+wx bits regardless of umask, which
	    # is incompatible with FreeBSD &#39;install&#39; when (umask &amp; 300) != 0.
	    ;;
	  *)
	    tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$
	    trap &#39;ret=$?; rmdir &quot;$tmpdir/d&quot; &quot;$tmpdir&quot; 2&gt;/dev/null; exit $ret&#39; 0

	    if (umask $mkdir_umask &amp;&amp;
		exec $mkdirprog $mkdir_mode -p -- &quot;$tmpdir/d&quot;) &gt;/dev/null 2&gt;&amp;1
	    then
	      if test -z &quot;$dir_arg&quot; || {
		   # Check for POSIX incompatibilities with -m.
		   # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or
		   # other-writable bit of parent directory when it shouldn&#39;t.
		   # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.
		   ls_ld_tmpdir=`ls -ld &quot;$tmpdir&quot;`
		   case $ls_ld_tmpdir in
		     d????-?r-*) different_mode=700;;
		     d????-?--*) different_mode=755;;
		     *) false;;
		   esac &amp;&amp;
		   $mkdirprog -m$different_mode -p -- &quot;$tmpdir&quot; &amp;&amp; {
		     ls_ld_tmpdir_1=`ls -ld &quot;$tmpdir&quot;`
		     test &quot;$ls_ld_tmpdir&quot; = &quot;$ls_ld_tmpdir_1&quot;
		   }
		 }
	      then posix_mkdir=:
	      fi
	      rmdir &quot;$tmpdir/d&quot; &quot;$tmpdir&quot;
	    else
	      # Remove any dirs left behind by ancient mkdir implementations.
	      rmdir ./$mkdir_mode ./-p ./-- 2&gt;/dev/null
	    fi
	    trap &#39;&#39; 0;;
	esac;;
    esac

    if
      $posix_mkdir &amp;&amp; (
	umask $mkdir_umask &amp;&amp;
	$doit_exec $mkdirprog $mkdir_mode -p -- &quot;$dstdir&quot;
      )
    then :
    else

      # The umask is ridiculous, or mkdir does not conform to POSIX,
      # or it failed possibly due to a race condition.  Create the
      # directory the slow way, step by step, checking for races as we go.

      case $dstdir in
	/*) prefix=&#39;/&#39;;;
	[-=\(\)!]*) prefix=&#39;./&#39;;;
	*)  prefix=&#39;&#39;;;
      esac

      oIFS=$IFS
      IFS=/
      set -f
      set fnord $dstdir
      shift
      set +f
      IFS=$oIFS

      prefixes=

      for d
      do
	test X&quot;$d&quot; = X &amp;&amp; continue

	prefix=$prefix$d
	if test -d &quot;$prefix&quot;; then
	  prefixes=
	else
	  if $posix_mkdir; then
	    (umask=$mkdir_umask &amp;&amp;
	     $doit_exec $mkdirprog $mkdir_mode -p -- &quot;$dstdir&quot;) &amp;&amp; break
	    # Don&#39;t fail if two instances are running concurrently.
	    test -d &quot;$prefix&quot; || exit 1
	  else
	    case $prefix in
	      *\&#39;*) qprefix=`echo &quot;$prefix&quot; | sed &quot;s/&#39;/&#39;\\\\\\\\&#39;&#39;/g&quot;`;;
	      *) qprefix=$prefix;;
	    esac
	    prefixes=&quot;$prefixes &#39;$qprefix&#39;&quot;
	  fi
	fi
	prefix=$prefix/
      done

      if test -n &quot;$prefixes&quot;; then
	# Don&#39;t fail if two instances are running concurrently.
	(umask $mkdir_umask &amp;&amp;
	 eval &quot;\$doit_exec \$mkdirprog $prefixes&quot;) ||
	  test -d &quot;$dstdir&quot; || exit 1
	obsolete_mkdir_used=true
      fi
    fi
  fi

  if test -n &quot;$dir_arg&quot;; then
    { test -z &quot;$chowncmd&quot; || $doit $chowncmd &quot;$dst&quot;; } &amp;&amp;
    { test -z &quot;$chgrpcmd&quot; || $doit $chgrpcmd &quot;$dst&quot;; } &amp;&amp;
    { test &quot;$obsolete_mkdir_used$chowncmd$chgrpcmd&quot; = false ||
      test -z &quot;$chmodcmd&quot; || $doit $chmodcmd $mode &quot;$dst&quot;; } || exit 1
  else

    # Make a couple of temp file names in the proper directory.
    dsttmp=$dstdir/_inst.$$_
    rmtmp=$dstdir/_rm.$$_

    # Trap to clean up those temp files at exit.
    trap &#39;ret=$?; rm -f &quot;$dsttmp&quot; &quot;$rmtmp&quot; &amp;&amp; exit $ret&#39; 0

    # Copy the file name to the temp name.
    (umask $cp_umask &amp;&amp; $doit_exec $cpprog &quot;$src&quot; &quot;$dsttmp&quot;) &amp;&amp;

    # and set any options; do chmod last to preserve setuid bits.
    #
    # If any of these fail, we abort the whole thing.  If we want to
    # ignore errors from any of these, just make sure not to ignore
    # errors from the above &quot;$doit $cpprog $src $dsttmp&quot; command.
    #
    { test -z &quot;$chowncmd&quot; || $doit $chowncmd &quot;$dsttmp&quot;; } &amp;&amp;
    { test -z &quot;$chgrpcmd&quot; || $doit $chgrpcmd &quot;$dsttmp&quot;; } &amp;&amp;
    { test -z &quot;$stripcmd&quot; || $doit $stripcmd &quot;$dsttmp&quot;; } &amp;&amp;
    { test -z &quot;$chmodcmd&quot; || $doit $chmodcmd $mode &quot;$dsttmp&quot;; } &amp;&amp;

    # If -C, don&#39;t bother to copy if it wouldn&#39;t change the file.
    if $copy_on_change &amp;&amp;
       old=`LC_ALL=C ls -dlL &quot;$dst&quot;	2&gt;/dev/null` &amp;&amp;
       new=`LC_ALL=C ls -dlL &quot;$dsttmp&quot;	2&gt;/dev/null` &amp;&amp;
       set -f &amp;&amp;
       set X $old &amp;&amp; old=:$2:$4:$5:$6 &amp;&amp;
       set X $new &amp;&amp; new=:$2:$4:$5:$6 &amp;&amp;
       set +f &amp;&amp;
       test &quot;$old&quot; = &quot;$new&quot; &amp;&amp;
       $cmpprog &quot;$dst&quot; &quot;$dsttmp&quot; &gt;/dev/null 2&gt;&amp;1
    then
      rm -f &quot;$dsttmp&quot;
    else
      # Rename the file to the real destination.
      $doit $mvcmd -f &quot;$dsttmp&quot; &quot;$dst&quot; 2&gt;/dev/null ||

      # The rename failed, perhaps because mv can&#39;t rename something else
      # to itself, or perhaps because mv is so ancient that it does not
      # support -f.
      {
	# Now remove or move aside any old file at destination location.
	# We try this two ways since rm can&#39;t unlink itself on some
	# systems and the destination file might be busy for other
	# reasons.  In this case, the final cleanup might fail but the new
	# file should still install successfully.
	{
	  test ! -f &quot;$dst&quot; ||
	  $doit $rmcmd -f &quot;$dst&quot; 2&gt;/dev/null ||
	  { $doit $mvcmd -f &quot;$dst&quot; &quot;$rmtmp&quot; 2&gt;/dev/null &amp;&amp;
	    { $doit $rmcmd -f &quot;$rmtmp&quot; 2&gt;/dev/null; :; }
	  } ||
	  { echo &quot;$0: cannot unlink or rename $dst&quot; &gt;&amp;2
	    (exit 1); exit 1
	  }
	} &amp;&amp;

	# Now rename the file to the real destination.
	$doit $mvcmd &quot;$dsttmp&quot; &quot;$dst&quot;
      }
    fi || exit 1

    trap &#39;&#39; 0
  fi
done

# Local variables:
# eval: (add-hook &#39;write-file-hooks &#39;time-stamp)
# time-stamp-start: &quot;scriptversion=&quot;
# time-stamp-format: &quot;%:y-%02m-%02d.%02H&quot;
# time-stamp-time-zone: &quot;UTC&quot;
# time-stamp-end: &quot;; # UTC&quot;
# End:
